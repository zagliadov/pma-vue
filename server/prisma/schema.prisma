generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id               Int         @id @default(autoincrement())
  email            String      @unique
  name             String?
  password         String
  workspace        Workspace[]
  avatar_filename  String?
  assignedTasks    Task[]      @relation("TaskAssignees")
  assignedSubtasks Subtask[]   @relation("SubtaskAssignees")
  Project          Project?    @relation(fields: [projectId], references: [id])
  projectId        Int?
}

model Workspace {
  id       Int       @id @default(autoincrement())
  name     String
  author   User      @relation(fields: [authorId], references: [id])
  authorId Int
  projects Project[]
}

model Project {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId Int
  tasks       Task[]
  assignees   User[]    @relation("ProjectAssignees", fields: [assigneeId], references: [id])
  assigneeId  Int?
}

model Task {
  id              Int       @id @default(autoincrement())
  name            String
  status          String
  description     String
  file_name       String
  task_goal_start DateTime?
  task_goal_end   DateTime?
  project         Project   @relation(fields: [projectId], references: [id])
  projectId       Int
  subtasks        Subtask[]
  blockedBy       Task?     @relation("BlockingTask", fields: [blockedById], references: [id])
  blockedById     Int?
  blockingTasks   Task[]    @relation("BlockingTask")
  assignees       User[]    @relation("TaskAssignees", fields: [assigneeId], references: [id])
  assigneeId      Int?
}

model Subtask {
  id                 Int       @id @default(autoincrement())
  name               String
  status             String
  subtask_goal_start DateTime?
  subtask_goal_end   DateTime?
  file_name          String
  description        String
  task               Task      @relation(fields: [taskId], references: [id])
  taskId             Int
  blockedBy          Subtask?  @relation("BlockingSubtask", fields: [blockedById], references: [id])
  blockedById        Int?
  blockingSubtasks   Subtask[] @relation("BlockingSubtask")
  assignees          User[]    @relation("SubtaskAssignees", fields: [assigneeId], references: [id])
  assigneeId         Int?
}

// model User {
//   id              Int         @id @default(autoincrement())
//   email           String      @unique
//   name            String?
//   password        String
//   workspace       Workspace[]
//   avatar_filename String
//   assignedTasks   Task[]    @relation("TaskAssignees")
//   assignedSubtasks Subtask[] @relation("SubtaskAssignees")
// }

// model Workspace {
//   id       Int       @id @default(autoincrement())
//   name     String
//   author   User      @relation(fields: [authorId], references: [id])
//   authorId Int
//   projects Project[]
// }

// model Project {
//   id          Int       @id @default(autoincrement())
//   name        String
//   description String
//   workspace   Workspace @relation(fields: [workspaceId], references: [id])
//   workspaceId Int
//   tasks       Task[]
// }

// model Task {
//   id              Int       @id @default(autoincrement())
//   name            String
//   status          String
//   description     String
//   file_name       String
//   task_goal_start DateTime?
//   task_goal_end   DateTime?
//   project         Project   @relation(fields: [projectId], references: [id])
//   projectId       Int
//   subtasks        Subtask[]
//   blockedBy       Task?     @relation("BlockingTask", fields: [blockedById], references: [id])
//   blockedById     Int?
//   blockingTasks   Task[]    @relation("BlockingTask")
//   assignees       User[]    @relation("TaskAssignees", fields: [assigneeId], references: [id])
//   assigneeId      Int?
// }

// model Subtask {
//   id                 Int       @id @default(autoincrement())
//   name               String
//   status             String
//   subtask_goal_start DateTime?
//   subtask_goal_end   DateTime?
//   file_name          String
//   description        String
//   task               Task      @relation(fields: [taskId], references: [id])
//   taskId             Int
//   blockedBy          Subtask?  @relation("BlockingSubtask", fields: [blockedById], references: [id])
//   blockedById        Int?
//   blockingSubtasks   Subtask[] @relation("BlockingSubtask")
//   assignees          User[]    @relation("SubtaskAssignees", fields: [assigneeId], references: [id])
//   assigneeId         Int?
// }
