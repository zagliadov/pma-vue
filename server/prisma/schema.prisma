generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id               Int         @id @default(autoincrement())
  email            String      @unique
  name             String?
  firstName        String?
  lastName         String?
  phoneNumber      String?
  language         String?
  timezone         String?
  startOfTheCalendarWeek String?
  timeFormat       String?
  dateFormat       String?
  password         String
  workspace        Workspace[]
  avatar_filename  String?
}

model Workspace {
  id       Int       @id @default(autoincrement())
  name     String
  author   User      @relation(fields: [authorId], references: [id])
  authorId Int
  projects Project[]
}

model Project {
  id          Int               @id @default(autoincrement())
  name        String
  description String
  workspace   Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId Int
  tasks       Task[]
  projectAssignees ProjectAssignee[]
}

model ProjectAssignee {
  id              Int     @id @default(autoincrement())
  userId          Int?
  email           String
  project         Project @relation(fields: [projectId], references: [id])
  projectId       Int
  projectCreator  Boolean
  isEmailConfirmed Boolean
}


model Task {
  id              Int       @id @default(autoincrement())
  name            String
  status          String
  description     String
  taskFiles       TaskFile[]
  task_goal_start DateTime?
  task_goal_end   DateTime?
  project         Project   @relation(fields: [projectId], references: [id])
  projectId       Int
  subtasks        Subtask[]
  blockedBy       Task?     @relation("BlockingTask", fields: [blockedById], references: [id])
  blockedById     Int?
  blockingTasks   Task[]    @relation("BlockingTask")
  taskAssignee    TaskAssignee[]
}

model TaskAssignee {
  id           Int      @id @default(autoincrement())
  userId       Int
  email        String
  task         Task     @relation(fields: [taskId], references: [id])
  taskId       Int
}


model TaskFile {
  id     Int      @id @default(autoincrement())
  taskId Int?
  fileName String?
  task   Task?     @relation(fields: [taskId], references: [id])
}

model Subtask {
  id                 Int       @id @default(autoincrement())
  name               String
  status             String
  subtask_goal_start DateTime?
  subtask_goal_end   DateTime?
  file_name          String
  description        String
  task               Task      @relation(fields: [taskId], references: [id])
  taskId             Int
  blockedBy          Subtask?  @relation("BlockingSubtask", fields: [blockedById], references: [id])
  blockedById        Int?
  blockingSubtasks   Subtask[] @relation("BlockingSubtask")
  assigneeId         Int?
}